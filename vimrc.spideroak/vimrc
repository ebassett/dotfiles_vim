scriptencoding utf-8	" See http://superuser.com/questions/556915 and elsewhere.
set encoding=utf-8
set nocompatible		" Put this first in vimrc (because it affects many other settings).

"===== VUNDLE ==========================
" :PluginList			-  list configured plugins
" :PluginInstall[!]		-  install (! => bzw. update) plugins
" :PluginUpdate			-  update plugins
" :PluginSearch[!] foo	-  search (! => refresh cache first) for foo
" :PluginClean[!]		-  confirm (! => auto-approve) removal of unused plugins
" OR s/Plugin/Vundle/
" See :help vundle for more details or https://github.com/VundleVim/Vundle.vim/wiki for FAQ.
" NOTE: Add to .gitignore: 'bundle/**' and then the exception '~bundle/Vundle.vim' so that git tracks only vundle itself.

filetype off  " Required for Vundle startup; turn on again afterwards.
set runtimepath+=$HOME/.vim/bundle/Vundle.vim/
call vundle#begin()
Plugin 'VundleVim/Vundle.vim' " Let Vundle manage Vundle. Required.

"-- github repos --
Plugin 'tpope/vim-abolish'			" Easily search for, substitute, and abbreviate multiple variants of a word.
Plugin 'bling/vim-airline'			" Powerful yet light statusline. :help airline for config options.
Plugin 'ebassett/vim-autoclose'		" Auto-closes (, [, {, \", '. Forked from vim-scripts/AutoClose.
Plugin 'gioele/vim-autoswap'		" Deal more intelligently with .swp files.
Plugin 'vim-scripts/diffchanges.vim'	" Show changes since last save. <Leader>diff => :DiffChangesDiffToggle
Plugin 'Lokaltog/vim-easymotion'	" Super-quick jump to word/line/search-term/etc. :help easymotion.
Plugin 'tpope/vim-eunuch'			" Vim sugar for some Unix shell commands, eg. :Rename, :SudoWrite.
Plugin 'terryma/vim-expand-region'	" See expand_region mapping below.
Plugin 'tpope/vim-fugitive'			" git plugin. See http://vimcasts.org/blog/2011/05/the-fugitive-series/.
									" airline needs this in order to detect and display the branch.
"Plugin 'airblade/vim-gitgutter'	" Indicate added/deleted/edited lines when using git.
Plugin 'nathanaelkane/vim-indent-guides'  " <Leader>ig => :IndentGuidesToggle
"Plugin 'davidhalter/jedi-vim'		" Auto-completion library for Python.
if has('unix')
	Plugin 'gergap/vim-konsole'		" KDE helper for autoswap. Requires `wmctrl` package from OS repo.
endif
Plugin 'vim-scripts/matchit.zip'	" Use '%' to jump between opening/closing HTML/XML tags, if/else-if/else, etc.
Plugin 'vim-scripts/MultipleSearch'	" Highlight multiple search terms in different colours. :help MultipleSearch.
Plugin 'scrooloose/nerdtree'		" File explorer. (:help nerdtree) I have :NERDTreeToggle mapped to <F2>.
Plugin 'vim-scripts/python_match.vim' " Use '%' to jump between Python if/elif/else, try/except/catch, etc.
Plugin 'tpope/vim-ragtag'			" Convenience for XML/HTML tags.
Plugin 'kien/rainbow_parentheses.vim'	" Colours parentheses and brackets according to nesting.
Plugin 'tpope/vim-repeat'			" Lets '.' (repeat) work with (supported) plugin commands.
"Plugin 'msanders/snipmate'			" Code snippets. See garbas/vim-snipmate for more recent fork.
Plugin 'tpope/vim-speeddating'		" Use CTRL-A/CTRL-X to increment/decrement dates, times, and more.
Plugin 'mhinz/vim-startify'			" Startup screen with recently-used files, sessions, bookmarks, etc.
"Plugin 'ervandew/supertab'			" Perform all your vim insert mode completions with Tab.
Plugin 'tpope/vim-surround'			" Wrap existing text in quotes, brackets, tags, etc.
"Plugin 'majutsushi/tagbar'			" Sidebar for coding symbols (ctags).
Plugin 'tomtom/tcomment_vim'		" Toggle line-/block-wise comments.
Plugin 'tpope/vim-unimpaired'		" Short Normal-mode aliases for commonly-used ex commands.
Plugin 'vimwiki/vimwiki'			" Personal wiki.

"-- vim.org/scripts repos --
"Example:	Plugin 'python_match.vim'

"-- non-github repos --
"Example:	Plugin 'git://git.wincent.com/command-t.git'

"-- *local* files --
"Example:	Plugin 'file:///Users/gmarik/path/to/plugin'

call vundle#end()
filetype plugin indent on  " Required. Equivalent to 'filetype on' AND 'filetype plugin on' AND 'filetype indent on'.


"===== GENERAL =========================
syntax on				" I believe this has to occur early in the vimrc.
" TODO: Move or qualify; this breaks Vundle (at least) under Windows.
set shell=/bin/bash\ --rcfile\ ~/.vim/vimbashrc
set fileformats+=mac	" Might as well add this. (Defaults: unix,dos under unix; dos,unix under Windows.)

"_____Tabbing and Indenting_____
set tabstop=4			" Tab Stops of four spaces (default was eight).
set shiftwidth=4		" Auto-indent by four spaces.
set softtabstop=4 		" When hitting tab or backspace, how many spaces should a tab be (see expandtab).
set shiftround 			" Round the indention nicely with other indents.
set smarttab
"set expandtab			" Convert tabs to spaces. I don't think I want this globally.
set autoindent
set smartindent			" cf. cindent.

"_____Other text manipulation_____
set textwidth=0			" NEVER automatically insert a hard newline.
set linebreak			" Soft-wrap at word boundaries rather than right at the end of the screen.
" See ':help fo-table' for formatoptions options. vim default is 'tcq'. Use '+=' and '-=' to modify.
set formatoptions+=rjl	" r = prefix comment character on Enter from a comment line;
						" j = drop second comment marker when joining two comment lines;
						" l = don't hard-wrap long lines.
set nrformats-=octal	" With CTRL-A/X inc-/decrementing, DON'T treat leading zero as octal.
set pastetoggle=<F3>	" Allow pasting from system clipboard into terminal vim without messing up indents.
						" See also the <F3> keymapping below.

"_____Extra-textual info/visibility_____
set number				" Line numbers (absolute). See KEY-MAPPINGS and FUNCTIONS for relative-numbering toggle.
set showmode			" Shows the mode in the last line. (This is actually on by default, but I like explicit.)
set showmatch			" Show matching brackets.
set cursorline			" Highlight current line.
"set cursorcolumn		" Hightlight current column.
set report=0			" 0 => ALWAYS tell us when anything is changed via a ':' command.
set showcmd				" Show the command being typed.
set ruler				" Always show current positions along the bottom.
set laststatus=2		" Always show the statusline. See vim-airline plugin for statusline settings.
set display=lastline	" If a line doesn't fit on the screen, show as much of it as possible.
"set list				" Display non-printing characters (according to listchars). ← → ⇐ ⇒ « » ␣ …
set listchars=eol:¶,extends:→,nbsp:␣,tab:»—,trail:·,precedes:←  " Chars for non-printing chars (if 'list' is set).
if v:version >= 800
	set listchars+=space:·
endif
if v:version >= 800
	set breakindent		" Visually indent wrapped lines to match beginning of line.
endif
set showbreak=\|		" String to indicate soft-wrapped lines. ‖
set noerrorbells		" Suppress audible bell.
set novisualbell		" Suppress visual bell. cf. t_vb.
set history=100			" Remember last n commands/searchs/etc.
set lazyredraw			" Do not redraw screen during (eg.) macro execution.

"_____Movement_____
set backspace=indent,eol,start
set nostartofline		" Don't always move cursor to beginning of line; leave it in the column I was on.
set scrolloff=3			" Minimum number of screen lines to keep above and below the cursor.
set sidescrolloff=5		" Minimum number of characters to keep when scrolling long lines.
set whichwrap=b,s,<,>,[,],~	" Allow these to traverse lines: <BS>, <SPACE>, <LEFT>, <RIGHT>, ~.
set matchpairs+=<:>		" Make % also jump between these pairs of characters.

"_____Searching_____
set gdefault			" Default to substituting globally on lines (g option). Add explicit g to reverse.
set ignorecase			" Necessary for smartcase to work.
set smartcase			" Case-sensitive if any capitals in search term, else insensitive. '\c' forces insensitive; '\C' forces sensitive.
set incsearch			" Incremental search: start matching as soon as you start typing search term.
set hlsearch			" Highlight search matches.
set nowrapscan			" Do NOT, EVER, continue search from top when you reach the bottom. I hate that.
" Autocompletion stuff.
set wildmenu
set wildmode=longest,list,full
set wildignore+=.git/**
set wildignore+=*~,*.bak,*.class,*.pyc,*.sw?

"_____Mousing_____
set mouse=a				"Allow mouse in all modes.

"_____Buffers_____
set hidden				" Do NOT require a buffer to be saved before switching to a different one.
set splitbelow
set splitright

"_____Spelling_____
set spelllang=en_ca
"set spell

"_____Misc_____
" Don't wait so long for the next keypress (particularly in ambigious Leader situations).
"set timeoutlen=500


"===== GUI (gvim) SETTINGS =============
if has('gui_running')
	colorscheme torte 	" Dark.
	set columns=120 	" Default window size.
	set lines=50		" Default window size.
	set mousehide		" Hide the mouse cursor when typing (only works in GUI).
	set guioptions-=T	" Don't show the toolbar in gvim.
	set guioptions-=m	" Don't show the menubar in gvim.
	set guicursor+=i-ci:ver50-Cursor/lCursor	" Make the insert cursor wider than the default.
else " Running in terminal
	set background=dark	" Background is dark so highlight syntax with light colours.
	" Don't use underline to highlight current line in terminal; use a background colour.
	if &cursorline
		highlight CursorLine  cterm=NONE ctermbg=DarkGrey
	endif
	" Match column highlighting to row highlighting (doesn't show up for me if not explicitly set).
	if &cursorcolumn
		highlight CursorColumn cterm=NONE ctermbg=DarkGrey
	endif
endif


"===== MS-WINDOWS SETTINGS =============
if has('win32') || has('win64')		" I'm not sure I need these settings; they're not that compelling.
	source $VIMRUNTIME/mswin.vim	" Just remaps CTRL-C/V/X/Z, I think.
	behave mswin					" Just changes some mouse-selection settings.
	set guifont=Consolas:h10,Lucida_Console:h10	" First choice, fallback.
	" TODO: See :help renderoptions (eg. for DirectX)
endif


"===== FILES: tmp, backup, undo, viminfo ========
" Trailing double-slash prods Vim to keep full path, to avoid collisions.
set backupdir=$HOME/.vim/_backup//
set writebackup				" Write a backup when saving a file...
set nobackup				" ...but delete the backup upon successful completion of the save.
set directory=$HOME/.vim/_tmp//
set undofile
set undodir=$HOME/.vim/_undo//
set viminfo+=n$HOME/.vim/viminfo	" Platform-independent name&location, not .viminfo vs _viminfo.


"===== KEY-MAPPINGS ====================
"_____Text manipulation_____
" Interact with system clipboard.
noremap <Leader>y  "+y
noremap <Leader>yy "+yy
noremap <Leader>y$ "+y$
noremap <Leader>Y  "+y$
noremap <Leader>p  "+p
noremap <Leader>P  "+P
" Make shift-insert work like in xterm. (Uses '*' register.)
noremap  <S-Insert> <MiddleMouse>
noremap! <S-Insert> <MiddleMouse>
" Y yanks to end of line (analogous to D for delete, C for change).
nnoremap Y y$
" Delete to the black-hole register.
nnoremap <Leader>d "_d
nnoremap <Leader>x "_x
"Bubble single lines (http://vimcasts.org/episodes/bubbling-text).
nnoremap <C-S-Up> ddkP
nnoremap <C-S-Down> ddp
"Bubble multiple (Visually-selected) lines (http://vimcasts.org/episodes/bubbling-text).
vnoremap <C-S-Up> xkP`[V`]
vnoremap <C-S-Down> xp`[V`]
" Hard linebreak at cursor (from and remaining in Normal mode).
" TODO: If at end of line, don't take last non-<CR> character.
nnoremap <Leader><CR> i<CR><ESC>
" Blank line below/above current (remaining in Normal mode). (Without <Leader> switches to Insert.)
nnoremap <Leader>o o<ESC>
nnoremap <Leader>O O<ESC>
" Toggle paste mode to paste properly indented text in the terminal. Not needed for gvim.)
" This echoes the paste mode to the status line as well. See also 'set togglepaste' above.
nnoremap <silent> <F3> :set invpaste paste?<CR>
" Insert short/long date (ie. write it to clipboard and then paste that in).
nnoremap <Leader>date "=strftime("%Y-%m-%d")<CR>p
nnoremap <Leader>DATE "=strftime("%A %d %B %Y %H:%M:%S")<CR>p
" No-op the keys that cause more trouble than they're worth when hit accidentally.
"   Normally starts Ex mode.
nnoremap Q <nop>
"   Normally opens man page for word under cursor.
nnoremap K <nop>
" Tab in Normal mode does nothing; make it switch to Insert mode, tab, return to Normal mode. NOTE: BREAKS CTRL-I navigation.
"nnoremap <TAB> i<TAB><ESC>l
" <SPACE> in Normal mode does nothing useful; make it page forward. With Shift, page backward.
nnoremap <SPACE> <C-f>
nnoremap <S-SPACE> <C-b>
" Jump to end of pasted text.
vnoremap <silent> y y`]
vnoremap <silent> p p`]
nnoremap <silent> p p`]
" Quickly select text you just pasted.
noremap gV `[v`]
" Use expand-region plugin; repeatedly hitting 'v' expands scope of selection; CTRL-v shrinks it.
vnoremap v <Plug>(expand_region_expand)
vnoremap <C-v> <Plug>(expand_region_shrink)
" Place cursor inside double-backticks (esp. for vimwiki). vim-autoclose does this for '/".
inoremap `` ``<Left>


"_____Extra-textual info/visibility_____
" Use 'kj' to get out of Insert mode into Normal mode.
inoremap kj <ESC>
" Avoid mistakes with accidental Caps Lock.
noremap KJ <ESC>:echo "CAPS LOCK is on."
" Swap ':' and ';' in Normal mode and Visual mode.
nnoremap : ;
nnoremap ; :
vnoremap : ;
vnoremap ; :
" Toggle absolute/relative/no line-numbering.
nnoremap <Leader>num :call g:ToggleNumberMode()<CR>
"noremap <C-v> :echo "Use \<Leader\>p to paste from system clipboard."<CR>
noremap <Leader>l :setlocal list!<CR>
noremap <F2> :execute 'NERDTreeToggle ' . getcwd()<CR>
nnoremap <Leader>R :RainbowParenthesesToggle<CR>
noremap <F8> :execute 'TagbarToggle'<CR>
" Show changes since last save.
nnoremap <Leader>diff :DiffChangesDiffToggle<CR>
" Would 'guides' be more mnemonic?
nnoremap <Leader>ig :IndentGuidesToggle<CR>


"_____Movement_____
" Swap screen-line-wise vs logical-line-wise behaviour of {j|k} and g{j|k} in Normal mode.
nnoremap j gj
nnoremap k gk
nnoremap gj j
nnoremap gk k
" Make arrow keys work (logical-line-wise) in Visual mode. And {j|k} screen-line-wise.
vnoremap <Left> h
vnoremap <Right> l
vnoremap <Up> k
vnoremap <Down> j
vnoremap j gj
vnoremap k gk
" When using 'gg' to go to first line, also go to start of line.
nnoremap gg gg0
" <Leader>Shift-g goes to last *non-blank* line.
nnoremap <Leader><S-g> <S-g>{}
" TODO: move this to .vim/ftplugin/vimwiki.vim
nnoremap <Leader>wg :VimwikiGoto<Space>

"_____Searching_____
" 'Very magic' (:help \v) regexes (less escaping) for '/' and '?' searches.
nnoremap / /\v
xnoremap / /\v
nnoremap ? ?\v
xnoremap ? ?\v
" See discussion at http://stackoverflow.com/questions/3760444/in-vim-is-there-a-way-to-set-very-magic-permanently-and-globally
" I usually use '#' as the delimiter in substitutions.
cnoremap %s# %smagic#
cnoremap >s# >smagic#
nnoremap :g/ :g/\v
nnoremap :g// :g//
" Clear search highlights, including from :Search (MultipleSearch plugin).
nnoremap <Leader><Space> :nohlsearch \| :SearchReset<CR>
"Shortcut for VWS (cf. VimWikiSearch) - TODO: move this to .vim/ftplugin/vimwiki.vim?
nnoremap <Leader>? :VWS ##<Left>

"_____Misc._____
" TODO: Map ':args FILE1 FILE2...' to something more mnemonic for opening multiple files in buffers.
" Alias :shell to :bash. Reminder: only works if typed quickly.
nnoremap ;bash :shell

"===== COMMAND ALIASES =================
" See http://blog.sanctum.geek.nz/vim-command-typos
command! -bang -nargs=? -complete=file E e<bang> <args>
command! -bang -nargs=? -complete=file W w<bang> <args>
command! -bang -nargs=? -complete=file Wq wq<bang> <args>
command! -bang -nargs=? -complete=file WQ wq<bang> <args>
command! -bang Wa wa<bang>
command! -bang WA wa<bang>
command! -bang Q q<bang>
command! -bang QA qa<bang>
command! -bang Qa qa<bang>
" Speed up vimgrep (ignore Autocommand events when opening files for grepping).
command! -nargs=* Vimgrep  noautocmd vimgrep <args>
"TODO: Is there any way to make :w write ONLY when there are changes?
"  => Yes: :update (or :up for short).
"    => TODO: How to map :w (and :wq, etc.) to use :update?


"===== AUTOCOMMANDS ====================
" EJB: Settings for my notes to myself: never tabs, always spaces, tab=2 spaces.
" Or should these be set on FileType=vimwiki, rather than on file extension?
augroup EJB
	autocmd! EJB
	autocmd BufRead,BufNewFile  *.wiki setlocal expandtab shiftwidth=2 softtabstop=2 tabstop=2
	autocmd BufRead,BufNewFile  *.wiki syn match Todo "\<\(TODO\|EJB\)"
	" Let me type '{{{' in vimwiki without adding line-feeds and indents.
	autocmd BufRead             *.wiki let g:autoclose_openspecial = 0
augroup END

augroup HELP_IN_TABS
	autocmd! HELP_IN_TABS
	autocmd BufEnter  *.txt  call HelpInNewTab()
augroup END

" Pretty-print (indent) JSON with eg. gg=G
augroup JSON
	autocmd! JSON
	autocmd FileType  json  setlocal equalprg=python3\ -m\ json.tool\ 2>/dev/null
augroup END

" Python as per PEP 8 (http://www.python.org/dev/peps/pep-0008/).
augroup PYTHON
	autocmd! PYTHON
	autocmd FileType  python  setlocal shiftwidth=4 softtabstop=4 tabstop=4 expandtab
augroup END

augroup VIMRC
	autocmd! VIMRC
	autocmd BufWritePost  $MYVIMRC  source %  " Automatically reload .vimrc (this file) when saving it.
	autocmd BufWritePost  $MYVIMRC  AirlineRefresh	" Otherwise (only for vimrc) airline loses colours.
augroup END

" Pretty-print (indent) XML with eg. gg=G - Requires xmllint in $PATH.
augroup XML_INDENT
	autocmd! XML_INDENT
	autocmd FileType  xml  setlocal equalprg=xmllint\ --format\ --recover\ -\ 2>/dev/null
augroup END

"===== FUNCTIONS =======================
" Open help files in new tabs. cf. HELP_IN_TABS augroup.
function! HelpInNewTab()
	if &buftype == 'help'
		execute "normal \<C-W>T"
	endif
endfunction

" Sort characters as characters, numbers as numbers.
" Usage: let sortedlist = sort(mylist, "NaturalSort")
" TODO: Figure out / ask (on StackOverflow o.Ä.) how to USE this on a file, in place.
function! g:NaturalSort(i, j)
	return (a:i+0) - (a:j+0)
endfunction

" Toggle among absolute, relative, and no line-numbering. I have this mapped to <Leader>num
function! g:ToggleNumberMode()
	if(&number == 1)
		set nonumber
		set relativenumber
	elseif(&relativenumber == 1)
		set norelativenumber
	else
		set number
	endif
endfunction


"===== PLUGIN SETTINGS =================
"_____vim-airline_____
" cf. :help airline - esp. :help airline-tabline
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_min_count = 2
let g:airline#extensions#tabline#buffer_nr_show = 1
let g:airline#extensions#tabline#buffer_nr_format = '%s:'
let g:airline#extensions#tabline#fnamemod = ':t'					" Show only filename, not path...
let g:airline#extensions#tabline#formatter = 'unique_tail_improved'	" ...except for identical filenames.
let g:airline#extensions#tabline#show_splits = 0
let g:airline#extensions#tabline#tab_nr_type = 1
let g:airline#extensions#tabline#show_tab_nr = 1
let g:airline#extensions#tabline#show_tab_type = 1
let g:airline#extensions#tabline#show_close_button = 0
let g:airline#extensions#whitespace#enabled = 1
let g:airline#extensions#whitespace#mixed_indent_algo = 2

"_____vim-autoclose_____
"let g:autoclose_special_curlybrace = 0

"_____vim-startify_____
let g:startify_custom_header = []
let g:startify_bookmarks = [
		\ {"ww": $HOME."/vimwiki/index.wiki"},
		\ {"td": $HOME."/vimwiki/TODO.wiki"},
		\ {"rc": $HOME."/.vim/vimrc"},
		\ {"sh": $HOME."/.bashrc"},
		\ {"al": $HOME."/.bash_aliases"},
		\ ]
let g:startify_skiplist = [
		\ '^/tmp',
		\ 'COMMIT_EDITMSG',
		\ $HOME.'/vimwiki/.*\.wiki',
		\ '^/usr/share/vim/vim.*/doc/.*',
		\ ]

"_____vimwiki_____
let g:vimwiki_use_mouse = 1
let g:vimwiki_url_maxsave = 0		" Do NOT shorten URLs, ever. I like explicit, full information.
let g:vimwiki_hl_headers = 1		" Use different colours for different header-levels.
let g:vimwiki_auto_chdir = 1		" `:lcd` to the Vimwiki folder to where the page belongs.
" let g:vimwiki_hl_cb_checked = 1	" Highlight lines with checked checkboxes.
" let g:vimwiki_listsyms = ' ○◐●✓'	" Use these to show how done a parent task is.
" let g:vimwiki_listsym_rejected = '✗'	" Use this to show a task that won't be done.
let ejb_wiki = {'path': '~/vimwiki/'}	" This is the default path, but I like explicit.
" let ejb_wiki.auto_tags = 1		" Update tags on every save.
" let ejb_wiki.auto_toc = 1			" Update TOC on every save.
let g:vimwiki_list = [ejb_wiki]


"===== ABBREVIATIONS ===================
"_____Snippets_____
" EJB: There's probably a better way to do this.
" EJB:   '<Leader>wiki' => [insert that text] ?  (<Leader>ww opens my vimwiki.)
iabbr #vim: # vim: expandtab shiftwidth=2 filetype=vimwiki<ESC>

"_____Spelling corrections_____
" Sorted by correct spelling.
iabbr becuase because
iabbr binaires binaries
iabbr execpt except
iabbr layber layer
iabbr mabye maybe
iabbr numberal numeral
iabbr prelfight preflight
iabbr renumeration remuneration
iabbr serach search
iabbr taht that
iabbr teh the
iabbr varaible variable
iabbr varaibles variables
iabbr verison version
iabbr verisons versions

